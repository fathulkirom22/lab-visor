{% macro resourceUsage(id) %}
    <div class="w-100">
        <canvas id="{{ id }}" class="w-100" style="height: 200px;" height="200">Loading...</canvas>
    </div>

    <script type="module">
        fetch('/api/sys/data-tracker?size=25')
            .then(response => response.json())
            .then(resource => {

                let data = {
                    labels: resource.data.map(item => DateTime.fromISO(item.created_at).setZone(tz).toFormat('HH:mm')),
                    datasets: [
                        {
                            label: "CPU",
                            data: resource.data.map(item => item.cpu),
                            borderWidth: 1
                        },
                        {
                            label: "Memory",
                            data: resource.data.map(item => item.memory),
                            borderWidth: 1
                        }
                    ]
                }
                const ctx = document.getElementById('{{ id }}');
                ctx.height = 200;

                new Chart(ctx, {
                    type: 'line',
                    data,
                    options: {
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true,
                                suggestedMax: 100
                            }
                        }
                    }
                });
            });

    </script>
{% endmacro %}

{% macro disk(id) %}
    <div class="w-100">
        <canvas id="{{ id }}" class="w-100">Loading...</canvas>
    </div>

    <script type="module">
        fetch('/api/sys/disk')
            .then(response => response.json())
            .then(resource => {
                const free = resource.data.free;
                const used = resource.data.used;
                const data = {
                    labels: ['Usage', 'Free'],
                    datasets: [{
                        data: [used, free],
                        backgroundColor: [
                            'rgba(220, 53, 69, 0.5)',
                            'rgba(40, 167, 69, 0.5)'
                        ],
                        borderColor: [
                            'rgba(220, 53, 69, 1.0)',
                            'rgba(40, 167, 69, 1.0)'
                        ],
                        borderWidth: 1
                    }]
                };
        
                const ctx = document.getElementById('{{ id }}');
                ctx.height = 250;

                new Chart(ctx, {
                    type: 'pie',
                    data,
                    options: {
                        maintainAspectRatio: false,
                        responsive: true,
                        maintainAspectRatio: false
                    }
                });
            });

    </script>
{% endmacro %}

{% macro realtimeResourceUsage(id) %}
    <div class="row align-items-start mb-5">
        <div class="col-md-6 mb-5 mb-md-0">
            <h4><i class="bi bi-cpu"></i> CPU</h4>
            <canvas id="{{ id }}-cpu" class="w-100" style="max-height: 200px;" height="200">Loading...</canvas>
        </div>
        <div class="col-md-6">
            <h4><i class="bi bi-memory"></i> Memory</h4>
            <canvas id="{{ id }}-memory" class="w-100" style="max-height: 200px;" height="200">Loading...</canvas>
        </div>
    </div>
    <div class="row align-items-start mb-5">
        <div class="col-md-6 mb-5 mb-md-0">
            <h4><i class="bi bi-reception-4"></i> Network</h4>
            <canvas id="{{ id }}-net" class="w-100" style="max-height: 200px;" height="200">Loading...</canvas>
        </div>
        <div class="col-md-6">
            <h4><i class="bi bi-hdd"></i> Disk IO</h4>
            <canvas id="{{ id }}-io" class="w-100" style="max-height: 200px;" height="200">Loading...</canvas>
        </div>
    </div>

    <div id="message-container"
        hx-ext="sse"
        sse-connect="/sys/sse"
        sse-swap="resource-chart-update"
        hidden>
    </div>

    <script type="module">
        const options = {
            maintainAspectRatio: false,
            scales: {
                x: {
                    display: false, // Sembunyikan seluruh sumbu (termasuk label dan tick)
                },
                y: {
                    beginAtZero: true,
                    suggestedMax: 100,
                }
            },
            animation: {
                duration: 0, // Set duration ke 0 untuk animasi instan
                easing: 'linear' // Gunakan easing linear untuk pergerakan konstan
            },
        }
        
        const _ctxcpu = document.getElementById('{{ id }}-cpu');
        _ctxcpu.height = 200;
        const chart_cpu = new Chart(_ctxcpu, {
            type: 'line',
            data: {
                labels: [],
                datasets: [
                    {
                        label: "CPU Usage",
                        data: [],
                        borderWidth: 1,
                        fill: true,
                        tension: 0.4
                    },
                ]
            },
            options
        });

        const _ctxmemory = document.getElementById('{{ id }}-memory');
        _ctxmemory.height = 200;
        const chart_memory = new Chart(_ctxmemory, {
            type: 'line',
            data: {
                labels: [],
                datasets: [
                    {
                        label: "Memory Usage",
                        data: [],
                        borderWidth: 1,
                        borderColor: 'rgba(255, 99, 132, 1)',
                        backgroundColor: 'rgba(255, 99, 132, 0.5)',
                        fill: true,
                        tension: 0.4
                    },
                ]
            },
            options
        });
        
        const _ctxnet = document.getElementById('{{ id }}-net');
        _ctxnet.height = 200;
        const chart_net = new Chart(_ctxnet, {
            type: 'line',
            data: {
                labels: [],
                datasets: [
                    {
                        label: "Sent",
                        data: [],
                        borderWidth: 1,
                        borderColor: 'rgba(253, 126, 20, 1.0)',
                        backgroundColor: 'rgba(253, 126, 20, 0.5)',
                        tension: 0.4
                    },
                    {
                        label: "Received",
                        data: [],
                        borderWidth: 1,
                        borderColor: 'rgba(40, 167, 69, 1.0)',
                        backgroundColor: 'rgba(40, 167, 69, 0.5)',
                        tension: 0.4
                    },
                ]
            },
            options: {
                ...options,
                scales: {
                    ...options.scales,
                    y: {
                        ...options.scales.y,
                        suggestedMax: false
                    }
                }
            }
        });

        const _ctxio = document.getElementById('{{ id }}-io');
        _ctxio.height = 200;
        const chart_io = new Chart(_ctxio, {
            type: 'line',
            data: {
                labels: [],
                datasets: [
                    {
                        label: "Write",
                        data: [],
                        borderWidth: 1,
                        borderColor: 'rgba(220, 53, 69, 1.0)',
                        backgroundColor: 'rgba(220, 53, 69, 0.5)',
                        tension: 0.4
                    },
                    {
                        label: "Read",
                        data: [],
                        borderWidth: 1,
                        borderColor: 'rgba(40, 167, 69, 1.0)',
                        backgroundColor: 'rgba(40, 167, 69, 0.5)',
                        tension: 0.4
                    },
                ]
            },
            options: {
                ...options,
                scales: {
                    ...options.scales,
                    y: {
                        ...options.scales.y,
                        suggestedMax: false
                    }
                }
            }
        });

        document.body.addEventListener("htmx:sseMessage", function(event) {
            if (event.detail.type === "resource-chart-update") {
                const data = JSON.parse(event.detail.data);

                // cpu
                chart_cpu.data.labels = data.labels;
                chart_cpu.data.datasets[0].data = data.cpu;
                chart_cpu.update();

                // memory
                chart_memory.data.labels = data.labels;
                chart_memory.data.datasets[0].data = data.memory;
                chart_memory.update();

                // network
                chart_net.data.labels = data.labels;
                chart_net.data.datasets[0].data = data.net.sent;
                chart_net.data.datasets[1].data = data.net.recv;
                chart_net.update();

                // disk io
                chart_io.data.labels = data.labels;
                chart_io.data.datasets[0].data = data.disk.write
                chart_io.data.datasets[1].data = data.disk.read
                chart_io.update()
            }
        });
        
    </script>
{% endmacro %}
